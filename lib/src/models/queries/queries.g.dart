// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'queries.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_AutocompleteQuery _$AutocompleteQueryFromJson(Map<String, dynamic> json) =>
    _AutocompleteQuery(
      q: json['q'] as String,
      location: json['location'] as String?,
      countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
      languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
    );

Map<String, dynamic> _$AutocompleteQueryToJson(_AutocompleteQuery instance) =>
    <String, dynamic>{
      'q': instance.q,
      'location': instance.location,
      'gl': _$CountryCodeEnumMap[instance.countryCode],
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
    };

const _$CountryCodeEnumMap = {
  CountryCode.afghanistan: 'af',
  CountryCode.albania: 'al',
  CountryCode.algeria: 'dz',
  CountryCode.americanSamoa: 'as',
  CountryCode.andorra: 'ad',
  CountryCode.angola: 'ao',
  CountryCode.anguilla: 'ai',
  CountryCode.antarctica: 'aq',
  CountryCode.antiguaAndBarbuda: 'ag',
  CountryCode.argentina: 'ar',
  CountryCode.armenia: 'am',
  CountryCode.aruba: 'aw',
  CountryCode.australia: 'au',
  CountryCode.austria: 'at',
  CountryCode.azerbaijan: 'az',
  CountryCode.bahamas: 'bs',
  CountryCode.bahrain: 'bh',
  CountryCode.bangladesh: 'bd',
  CountryCode.barbados: 'bb',
  CountryCode.belarus: 'by',
  CountryCode.belgium: 'be',
  CountryCode.belize: 'bz',
  CountryCode.benin: 'bj',
  CountryCode.bermuda: 'bm',
  CountryCode.bhutan: 'bt',
  CountryCode.bolivia: 'bo',
  CountryCode.bosniaAndHerzegovina: 'ba',
  CountryCode.botswana: 'bw',
  CountryCode.bouvetIsland: 'bv',
  CountryCode.brazil: 'br',
  CountryCode.britishIndianOceanTerritory: 'io',
  CountryCode.bruneiDarussalam: 'bn',
  CountryCode.bulgaria: 'bg',
  CountryCode.burkinaFaso: 'bf',
  CountryCode.burundi: 'bi',
  CountryCode.cambodia: 'kh',
  CountryCode.cameroon: 'cm',
  CountryCode.canada: 'ca',
  CountryCode.capeVerde: 'cv',
  CountryCode.caymanIslands: 'ky',
  CountryCode.centralAfricanRepublic: 'cf',
  CountryCode.chad: 'td',
  CountryCode.chile: 'cl',
  CountryCode.china: 'cn',
  CountryCode.christmasIsland: 'cx',
  CountryCode.cocosKeelingIslands: 'cc',
  CountryCode.colombia: 'co',
  CountryCode.comoros: 'km',
  CountryCode.congo: 'cg',
  CountryCode.congoTheDemocraticRepublicOfThe: 'cd',
  CountryCode.cookIslands: 'ck',
  CountryCode.costaRica: 'cr',
  CountryCode.coteDivoire: 'ci',
  CountryCode.croatia: 'hr',
  CountryCode.cuba: 'cu',
  CountryCode.cyprus: 'cy',
  CountryCode.czechRepublic: 'cz',
  CountryCode.denmark: 'dk',
  CountryCode.djibouti: 'dj',
  CountryCode.dominica: 'dm',
  CountryCode.dominicanRepublic: 'do',
  CountryCode.ecuador: 'ec',
  CountryCode.egypt: 'eg',
  CountryCode.elSalvador: 'sv',
  CountryCode.equatorialGuinea: 'gq',
  CountryCode.eritrea: 'er',
  CountryCode.estonia: 'ee',
  CountryCode.ethiopia: 'et',
  CountryCode.falklandIslandsMalvinas: 'fk',
  CountryCode.faroeIslands: 'fo',
  CountryCode.fiji: 'fj',
  CountryCode.finland: 'fi',
  CountryCode.france: 'fr',
  CountryCode.frenchGuiana: 'gf',
  CountryCode.frenchPolynesia: 'pf',
  CountryCode.frenchSouthernTerritories: 'tf',
  CountryCode.gabon: 'ga',
  CountryCode.gambia: 'gm',
  CountryCode.georgia: 'ge',
  CountryCode.germany: 'de',
  CountryCode.ghana: 'gh',
  CountryCode.gibraltar: 'gi',
  CountryCode.greece: 'gr',
  CountryCode.greenland: 'gl',
  CountryCode.grenada: 'gd',
  CountryCode.guadeloupe: 'gp',
  CountryCode.guam: 'gu',
  CountryCode.guatemala: 'gt',
  CountryCode.guernsey: 'gg',
  CountryCode.guinea: 'gn',
  CountryCode.guineaBissau: 'gw',
  CountryCode.guyana: 'gy',
  CountryCode.haiti: 'ht',
  CountryCode.heardIslandAndMcdonaldIslands: 'hm',
  CountryCode.holySeeVaticanCityState: 'va',
  CountryCode.honduras: 'hn',
  CountryCode.hongKong: 'hk',
  CountryCode.hungary: 'hu',
  CountryCode.iceland: 'is',
  CountryCode.india: 'in',
  CountryCode.indonesia: 'id',
  CountryCode.iranIslamicRepublicOf: 'ir',
  CountryCode.iraq: 'iq',
  CountryCode.ireland: 'ie',
  CountryCode.isleOfMan: 'im',
  CountryCode.israel: 'il',
  CountryCode.italy: 'it',
  CountryCode.jersey: 'je',
  CountryCode.jamaica: 'jm',
  CountryCode.japan: 'jp',
  CountryCode.jordan: 'jo',
  CountryCode.kazakhstan: 'kz',
  CountryCode.kenya: 'ke',
  CountryCode.kiribati: 'ki',
  CountryCode.koreaDemocraticPeoplesRepublicOf: 'kp',
  CountryCode.koreaRepublicOf: 'kr',
  CountryCode.kuwait: 'kw',
  CountryCode.kyrgyzstan: 'kg',
  CountryCode.laoPeoplesDemocraticRepublic: 'la',
  CountryCode.latvia: 'lv',
  CountryCode.lebanon: 'lb',
  CountryCode.lesotho: 'ls',
  CountryCode.liberia: 'lr',
  CountryCode.libyanArabJamahiriya: 'ly',
  CountryCode.liechtenstein: 'li',
  CountryCode.lithuania: 'lt',
  CountryCode.luxembourg: 'lu',
  CountryCode.macao: 'mo',
  CountryCode.macedoniaTheFormerYugosalvRepublicOf: 'mk',
  CountryCode.madagascar: 'mg',
  CountryCode.malawi: 'mw',
  CountryCode.malaysia: 'my',
  CountryCode.maldives: 'mv',
  CountryCode.mali: 'ml',
  CountryCode.malta: 'mt',
  CountryCode.marshallIslands: 'mh',
  CountryCode.martinique: 'mq',
  CountryCode.mauritania: 'mr',
  CountryCode.mauritius: 'mu',
  CountryCode.mayotte: 'yt',
  CountryCode.mexico: 'mx',
  CountryCode.micronesiaFederatedStatesOf: 'fm',
  CountryCode.moldovaRepublicOf: 'md',
  CountryCode.monaco: 'mc',
  CountryCode.mongolia: 'mn',
  CountryCode.montenegro: 'me',
  CountryCode.montserrat: 'ms',
  CountryCode.morocco: 'ma',
  CountryCode.mozambique: 'mz',
  CountryCode.myanmar: 'mm',
  CountryCode.namibia: 'na',
  CountryCode.nauru: 'nr',
  CountryCode.nepal: 'np',
  CountryCode.netherlands: 'nl',
  CountryCode.netherlandsAntilles: 'an',
  CountryCode.newCaledonia: 'nc',
  CountryCode.newZealand: 'nz',
  CountryCode.nicaragua: 'ni',
  CountryCode.niger: 'ne',
  CountryCode.nigeria: 'ng',
  CountryCode.niue: 'nu',
  CountryCode.norfolkIsland: 'nf',
  CountryCode.northernMarianaIslands: 'mp',
  CountryCode.norway: 'no',
  CountryCode.oman: 'om',
  CountryCode.pakistan: 'pk',
  CountryCode.palau: 'pw',
  CountryCode.palestinianTerritoryOccupied: 'ps',
  CountryCode.panama: 'pa',
  CountryCode.papuaNewGuinea: 'pg',
  CountryCode.paraguay: 'py',
  CountryCode.peru: 'pe',
  CountryCode.philippines: 'ph',
  CountryCode.pitcairn: 'pn',
  CountryCode.poland: 'pl',
  CountryCode.portugal: 'pt',
  CountryCode.puertoRico: 'pr',
  CountryCode.qatar: 'qa',
  CountryCode.reunion: 're',
  CountryCode.romania: 'ro',
  CountryCode.russianFederation: 'ru',
  CountryCode.rwanda: 'rw',
  CountryCode.saintHelena: 'sh',
  CountryCode.saintKittsAndNevis: 'kn',
  CountryCode.saintLucia: 'lc',
  CountryCode.saintPierreAndMiquelon: 'pm',
  CountryCode.saintVincentAndTheGrenadines: 'vc',
  CountryCode.samoa: 'ws',
  CountryCode.sanMarino: 'sm',
  CountryCode.saoTomeAndPrincipe: 'st',
  CountryCode.saudiArabia: 'sa',
  CountryCode.senegal: 'sn',
  CountryCode.serbia: 'rs',
  CountryCode.seychelles: 'sc',
  CountryCode.sierraLeone: 'sl',
  CountryCode.singapore: 'sg',
  CountryCode.slovakia: 'sk',
  CountryCode.slovenia: 'si',
  CountryCode.solomonIslands: 'sb',
  CountryCode.somalia: 'so',
  CountryCode.southAfrica: 'za',
  CountryCode.southGeorgiaAndTheSouthSandwichIslands: 'gs',
  CountryCode.spain: 'es',
  CountryCode.sriLanka: 'lk',
  CountryCode.sudan: 'sd',
  CountryCode.suriname: 'sr',
  CountryCode.svalbardAndJanMayen: 'sj',
  CountryCode.swaziland: 'sz',
  CountryCode.sweden: 'se',
  CountryCode.switzerland: 'ch',
  CountryCode.syrianArabRepublic: 'sy',
  CountryCode.taiwanProvinceOfChina: 'tw',
  CountryCode.tajikistan: 'tj',
  CountryCode.tanzaniaUnitedRepublicOf: 'tz',
  CountryCode.thailand: 'th',
  CountryCode.timorLeste: 'tl',
  CountryCode.togo: 'tg',
  CountryCode.tokelau: 'tk',
  CountryCode.tonga: 'to',
  CountryCode.trinidadAndTobago: 'tt',
  CountryCode.tunisia: 'tn',
  CountryCode.turkiye: 'tr',
  CountryCode.turkmenistan: 'tm',
  CountryCode.turksAndCaicosIslands: 'tc',
  CountryCode.tuvalu: 'tv',
  CountryCode.uganda: 'ug',
  CountryCode.ukraine: 'ua',
  CountryCode.unitedArabEmirates: 'ae',
  CountryCode.unitedKingdomUK: 'uk',
  CountryCode.unitedKingdomGB: 'gb',
  CountryCode.unitedStates: 'us',
  CountryCode.unitedStatesMinorOutlyingIslands: 'um',
  CountryCode.uruguay: 'uy',
  CountryCode.uzbekistan: 'uz',
  CountryCode.vanuatu: 'vu',
  CountryCode.venezuela: 've',
  CountryCode.vietNam: 'vn',
  CountryCode.virginIslandsBritish: 'vg',
  CountryCode.virginIslandsUS: 'vi',
  CountryCode.wallisAndFutuna: 'wf',
  CountryCode.westernSahara: 'eh',
  CountryCode.yemen: 'ye',
  CountryCode.zambia: 'zm',
  CountryCode.zimbabwe: 'zw',
};

const _$LanguageCodeEnumMap = {
  LanguageCode.afrikaans: 'af',
  LanguageCode.akan: 'ak',
  LanguageCode.albanian: 'sq',
  LanguageCode.samoa: 'ws',
  LanguageCode.amharic: 'am',
  LanguageCode.arabic: 'ar',
  LanguageCode.armenian: 'hy',
  LanguageCode.azerbaijani: 'az',
  LanguageCode.basque: 'eu',
  LanguageCode.belarusian: 'be',
  LanguageCode.bemba: 'bem',
  LanguageCode.bengali: 'bn',
  LanguageCode.bihari: 'bh',
  LanguageCode.borkBorkBork: 'xx-bork',
  LanguageCode.bosnian: 'bs',
  LanguageCode.breton: 'br',
  LanguageCode.bulgarian: 'bg',
  LanguageCode.bhutanese: 'bt',
  LanguageCode.cambodian: 'km',
  LanguageCode.catalan: 'ca',
  LanguageCode.cherokee: 'chr',
  LanguageCode.chichewa: 'ny',
  LanguageCode.chineseSimplified: 'zh-cn',
  LanguageCode.chineseTraditional: 'zh-tw',
  LanguageCode.corsican: 'co',
  LanguageCode.croatian: 'hr',
  LanguageCode.czech: 'cs',
  LanguageCode.danish: 'da',
  LanguageCode.dutch: 'nl',
  LanguageCode.elmerFudd: 'xx-elmer',
  LanguageCode.english: 'en',
  LanguageCode.esperanto: 'eo',
  LanguageCode.estonian: 'et',
  LanguageCode.ewe: 'ee',
  LanguageCode.faroese: 'fo',
  LanguageCode.filipino: 'tl',
  LanguageCode.finnish: 'fi',
  LanguageCode.french: 'fr',
  LanguageCode.frisian: 'fy',
  LanguageCode.ga: 'gaa',
  LanguageCode.galician: 'gl',
  LanguageCode.georgian: 'ka',
  LanguageCode.german: 'de',
  LanguageCode.greek: 'el',
  LanguageCode.greenlandic: 'kl',
  LanguageCode.guarani: 'gn',
  LanguageCode.gujarati: 'gu',
  LanguageCode.hacker: 'xx-hacker',
  LanguageCode.haitianCreole: 'ht',
  LanguageCode.hausa: 'ha',
  LanguageCode.hawaiian: 'haw',
  LanguageCode.hebrewIW: 'iw',
  LanguageCode.hebrewHE: 'he',
  LanguageCode.hindi: 'hi',
  LanguageCode.hungarian: 'hu',
  LanguageCode.icelandic: 'is',
  LanguageCode.igbo: 'ig',
  LanguageCode.indonesian: 'id',
  LanguageCode.interlingua: 'ia',
  LanguageCode.irish: 'ga',
  LanguageCode.italian: 'it',
  LanguageCode.japanese: 'ja',
  LanguageCode.javanese: 'jw',
  LanguageCode.kannada: 'kn',
  LanguageCode.kazakh: 'kk',
  LanguageCode.kinyarwanda: 'rw',
  LanguageCode.kirundi: 'rn',
  LanguageCode.klingon: 'xx-klingon',
  LanguageCode.kongo: 'kg',
  LanguageCode.korean: 'ko',
  LanguageCode.krioSierraLeone: 'kri',
  LanguageCode.kurdish: 'ku',
  LanguageCode.kurdishSorani: 'ckb',
  LanguageCode.kyrgyz: 'ky',
  LanguageCode.laothian: 'lo',
  LanguageCode.latin: 'la',
  LanguageCode.latvian: 'lv',
  LanguageCode.lingala: 'ln',
  LanguageCode.lithuanian: 'lt',
  LanguageCode.lozi: 'loz',
  LanguageCode.luganda: 'lg',
  LanguageCode.luo: 'ach',
  LanguageCode.macedonian: 'mk',
  LanguageCode.malagasy: 'mg',
  LanguageCode.malay: 'ms',
  LanguageCode.malayalam: 'ml',
  LanguageCode.maltese: 'mt',
  LanguageCode.maldives: 'mv',
  LanguageCode.maori: 'mi',
  LanguageCode.marathi: 'mr',
  LanguageCode.mauritianCreole: 'mfe',
  LanguageCode.moldavian: 'mo',
  LanguageCode.mongolian: 'mn',
  LanguageCode.montenegrin: 'sr-me',
  LanguageCode.myanmar: 'my',
  LanguageCode.nepali: 'ne',
  LanguageCode.nigerianPidgin: 'pcm',
  LanguageCode.northernSotho: 'nso',
  LanguageCode.norwegian: 'no',
  LanguageCode.norwegianNynorsk: 'nn',
  LanguageCode.occitan: 'oc',
  LanguageCode.oriya: 'or',
  LanguageCode.oromo: 'om',
  LanguageCode.pashto: 'ps',
  LanguageCode.persian: 'fa',
  LanguageCode.pirate: 'xx-pirate',
  LanguageCode.polish: 'pl',
  LanguageCode.portuguese: 'pt',
  LanguageCode.portugueseBrazil: 'pt-br',
  LanguageCode.portuguesePortugal: 'pt-pt',
  LanguageCode.punjabi: 'pa',
  LanguageCode.quechua: 'qu',
  LanguageCode.romanian: 'ro',
  LanguageCode.romansh: 'rm',
  LanguageCode.runyakitara: 'nyn',
  LanguageCode.russian: 'ru',
  LanguageCode.scotsGaelic: 'gd',
  LanguageCode.serbian: 'sr',
  LanguageCode.serboCroatian: 'sh',
  LanguageCode.sesotho: 'st',
  LanguageCode.setswana: 'tn',
  LanguageCode.seychelloisCreole: 'crs',
  LanguageCode.shona: 'sn',
  LanguageCode.sindhi: 'sd',
  LanguageCode.sinhalese: 'si',
  LanguageCode.slovak: 'sk',
  LanguageCode.slovenian: 'sl',
  LanguageCode.somali: 'so',
  LanguageCode.spanish: 'es',
  LanguageCode.spanishLatinAmerican: 'es-419',
  LanguageCode.sundanese: 'su',
  LanguageCode.swahili: 'sw',
  LanguageCode.swedish: 'sv',
  LanguageCode.tajik: 'tg',
  LanguageCode.tamil: 'ta',
  LanguageCode.tatar: 'tt',
  LanguageCode.telugu: 'te',
  LanguageCode.thai: 'th',
  LanguageCode.tigrinya: 'ti',
  LanguageCode.tonga: 'to',
  LanguageCode.tshiluba: 'lua',
  LanguageCode.tumbuka: 'tum',
  LanguageCode.turkish: 'tr',
  LanguageCode.turkmen: 'tk',
  LanguageCode.twi: 'tw',
  LanguageCode.uighur: 'ug',
  LanguageCode.ukrainian: 'uk',
  LanguageCode.urdu: 'ur',
  LanguageCode.uzbek: 'uz',
  LanguageCode.vanuatu: 'vu',
  LanguageCode.vietnamese: 'vi',
  LanguageCode.welsh: 'cy',
  LanguageCode.wolof: 'wo',
  LanguageCode.xhosa: 'xh',
  LanguageCode.yiddish: 'yi',
  LanguageCode.yoruba: 'yo',
  LanguageCode.zulu: 'zu',
};

_ImagesQuery _$ImagesQueryFromJson(Map<String, dynamic> json) => _ImagesQuery(
  q: json['q'] as String,
  location: json['location'] as String?,
  countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
  languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
  num: (json['num'] as num?)?.toInt(),
  autocorrect: json['autocorrect'] as bool?,
  tbs: $enumDecodeNullable(_$TbsValueEnumMap, json['tbs']),
  page: (json['page'] as num?)?.toInt(),
);

Map<String, dynamic> _$ImagesQueryToJson(_ImagesQuery instance) =>
    <String, dynamic>{
      'q': instance.q,
      'location': instance.location,
      'gl': _$CountryCodeEnumMap[instance.countryCode],
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
      'num': instance.num,
      'autocorrect': instance.autocorrect,
      'tbs': _$TbsValueEnumMap[instance.tbs],
      'page': instance.page,
    };

const _$TbsValueEnumMap = {
  TbsValue.pastHour: 'qdr:h',
  TbsValue.pastDay: 'qdr:d',
  TbsValue.pastWeek: 'qdr:w',
  TbsValue.pastMonth: 'qdr:m',
  TbsValue.pastYear: 'qdr:y',
};

_PlacesQuery _$PlacesQueryFromJson(Map<String, dynamic> json) => _PlacesQuery(
  q: json['q'] as String,
  location: json['location'] as String?,
  countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
  languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
  autocorrect: json['autocorrect'] as bool?,
  tbs: $enumDecodeNullable(_$TbsValueEnumMap, json['tbs']),
  page: (json['page'] as num?)?.toInt(),
);

Map<String, dynamic> _$PlacesQueryToJson(_PlacesQuery instance) =>
    <String, dynamic>{
      'q': instance.q,
      'location': instance.location,
      'gl': _$CountryCodeEnumMap[instance.countryCode],
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
      'autocorrect': instance.autocorrect,
      'tbs': _$TbsValueEnumMap[instance.tbs],
      'page': instance.page,
    };

_VideosQuery _$VideosQueryFromJson(Map<String, dynamic> json) => _VideosQuery(
  q: json['q'] as String,
  location: json['location'] as String?,
  countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
  languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
  num: (json['num'] as num?)?.toInt(),
  autocorrect: json['autocorrect'] as bool?,
  tbs: $enumDecodeNullable(_$TbsValueEnumMap, json['tbs']),
  page: (json['page'] as num?)?.toInt(),
);

Map<String, dynamic> _$VideosQueryToJson(_VideosQuery instance) =>
    <String, dynamic>{
      'q': instance.q,
      'location': instance.location,
      'gl': _$CountryCodeEnumMap[instance.countryCode],
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
      'num': instance.num,
      'autocorrect': instance.autocorrect,
      'tbs': _$TbsValueEnumMap[instance.tbs],
      'page': instance.page,
    };

_MapsQuery _$MapsQueryFromJson(Map<String, dynamic> json) => _MapsQuery(
  q: json['q'] as String,
  languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
  latLng: _$JsonConverterFromJson<String, LatLng>(
    json['ll'],
    const LatLngConverter().fromJson,
  ),
  placeId: json['placeId'] as String?,
  cid: json['cid'] as String?,
  page: (json['page'] as num?)?.toInt(),
);

Map<String, dynamic> _$MapsQueryToJson(_MapsQuery instance) =>
    <String, dynamic>{
      'q': instance.q,
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
      'll': _$JsonConverterToJson<String, LatLng>(
        instance.latLng,
        const LatLngConverter().toJson,
      ),
      'placeId': instance.placeId,
      'cid': instance.cid,
      'page': instance.page,
    };

Value? _$JsonConverterFromJson<Json, Value>(
  Object? json,
  Value? Function(Json json) fromJson,
) => json == null ? null : fromJson(json as Json);

Json? _$JsonConverterToJson<Json, Value>(
  Value? value,
  Json? Function(Value value) toJson,
) => value == null ? null : toJson(value);

ReviewsQueryCid _$ReviewsQueryCidFromJson(Map<String, dynamic> json) =>
    ReviewsQueryCid(
      cid: json['cid'] as String,
      countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
      languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
      sortBy: $enumDecodeNullable(_$SortByValueEnumMap, json['sortBy']),
      topicId: json['topicId'] as String?,
      nextPageToken: json['nextPageToken'] as String?,
      q: json['q'] as String?,
      $type: json['runtimeType'] as String?,
    );

Map<String, dynamic> _$ReviewsQueryCidToJson(ReviewsQueryCid instance) =>
    <String, dynamic>{
      'cid': instance.cid,
      'gl': _$CountryCodeEnumMap[instance.countryCode],
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
      'sortBy': _$SortByValueEnumMap[instance.sortBy],
      'topicId': instance.topicId,
      'nextPageToken': instance.nextPageToken,
      'q': instance.q,
      'runtimeType': instance.$type,
    };

const _$SortByValueEnumMap = {
  SortByValue.newest: 'newest',
  SortByValue.highestRating: 'highest_rating',
  SortByValue.lowestRating: 'lowest_rating',
  SortByValue.relevant: 'relevant',
};

ReviewsQueryFid _$ReviewsQueryFidFromJson(Map<String, dynamic> json) =>
    ReviewsQueryFid(
      fid: json['fid'] as String,
      countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
      languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
      sortBy: $enumDecodeNullable(_$SortByValueEnumMap, json['sortBy']),
      topicId: json['topicId'] as String?,
      nextPageToken: json['nextPageToken'] as String?,
      q: json['q'] as String?,
      $type: json['runtimeType'] as String?,
    );

Map<String, dynamic> _$ReviewsQueryFidToJson(ReviewsQueryFid instance) =>
    <String, dynamic>{
      'fid': instance.fid,
      'gl': _$CountryCodeEnumMap[instance.countryCode],
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
      'sortBy': _$SortByValueEnumMap[instance.sortBy],
      'topicId': instance.topicId,
      'nextPageToken': instance.nextPageToken,
      'q': instance.q,
      'runtimeType': instance.$type,
    };

ReviewsQueryPlaceId _$ReviewsQueryPlaceIdFromJson(Map<String, dynamic> json) =>
    ReviewsQueryPlaceId(
      placeId: json['placeId'] as String,
      countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
      languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
      sortBy: $enumDecodeNullable(_$SortByValueEnumMap, json['sortBy']),
      topicId: json['topicId'] as String?,
      nextPageToken: json['nextPageToken'] as String?,
      q: json['q'] as String?,
      $type: json['runtimeType'] as String?,
    );

Map<String, dynamic> _$ReviewsQueryPlaceIdToJson(
  ReviewsQueryPlaceId instance,
) => <String, dynamic>{
  'placeId': instance.placeId,
  'gl': _$CountryCodeEnumMap[instance.countryCode],
  'hl': _$LanguageCodeEnumMap[instance.languageCode],
  'sortBy': _$SortByValueEnumMap[instance.sortBy],
  'topicId': instance.topicId,
  'nextPageToken': instance.nextPageToken,
  'q': instance.q,
  'runtimeType': instance.$type,
};

_NewsQuery _$NewsQueryFromJson(Map<String, dynamic> json) => _NewsQuery(
  q: json['q'] as String,
  location: json['location'] as String?,
  countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
  languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
  num: (json['num'] as num?)?.toInt(),
  autocorrect: json['autocorrect'] as bool?,
  tbs: $enumDecodeNullable(_$TbsValueEnumMap, json['tbs']),
  page: (json['page'] as num?)?.toInt(),
);

Map<String, dynamic> _$NewsQueryToJson(_NewsQuery instance) =>
    <String, dynamic>{
      'q': instance.q,
      'location': instance.location,
      'gl': _$CountryCodeEnumMap[instance.countryCode],
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
      'num': instance.num,
      'autocorrect': instance.autocorrect,
      'tbs': _$TbsValueEnumMap[instance.tbs],
      'page': instance.page,
    };

_ShoppingQuery _$ShoppingQueryFromJson(Map<String, dynamic> json) =>
    _ShoppingQuery(
      q: json['q'] as String,
      location: json['location'] as String?,
      countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
      languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
      autocorrect: json['autocorrect'] as bool?,
      tbs: $enumDecodeNullable(_$TbsValueEnumMap, json['tbs']),
      page: (json['page'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ShoppingQueryToJson(_ShoppingQuery instance) =>
    <String, dynamic>{
      'q': instance.q,
      'location': instance.location,
      'gl': _$CountryCodeEnumMap[instance.countryCode],
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
      'autocorrect': instance.autocorrect,
      'tbs': _$TbsValueEnumMap[instance.tbs],
      'page': instance.page,
    };

_LensQuery _$LensQueryFromJson(Map<String, dynamic> json) => _LensQuery(
  url: json['url'] as String,
  location: json['location'] as String?,
  countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
  languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
  tbs: $enumDecodeNullable(_$TbsValueEnumMap, json['tbs']),
  q: json['q'] as String?,
);

Map<String, dynamic> _$LensQueryToJson(_LensQuery instance) =>
    <String, dynamic>{
      'url': instance.url,
      'location': instance.location,
      'gl': _$CountryCodeEnumMap[instance.countryCode],
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
      'tbs': _$TbsValueEnumMap[instance.tbs],
      'q': instance.q,
    };

_ScholarQuery _$ScholarQueryFromJson(Map<String, dynamic> json) =>
    _ScholarQuery(
      q: json['q'] as String,
      location: json['location'] as String?,
      countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
      languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
      autocorrect: json['autocorrect'] as bool?,
      tbs: $enumDecodeNullable(_$TbsValueEnumMap, json['tbs']),
      page: (json['page'] as num?)?.toInt(),
    );

Map<String, dynamic> _$ScholarQueryToJson(_ScholarQuery instance) =>
    <String, dynamic>{
      'q': instance.q,
      'location': instance.location,
      'gl': _$CountryCodeEnumMap[instance.countryCode],
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
      'autocorrect': instance.autocorrect,
      'tbs': _$TbsValueEnumMap[instance.tbs],
      'page': instance.page,
    };

_PatentsQuery _$PatentsQueryFromJson(Map<String, dynamic> json) =>
    _PatentsQuery(
      q: json['q'] as String,
      location: json['location'] as String?,
      countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
      languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
      num: (json['num'] as num?)?.toInt(),
      autocorrect: json['autocorrect'] as bool?,
      tbs: $enumDecodeNullable(_$TbsValueEnumMap, json['tbs']),
      page: (json['page'] as num?)?.toInt(),
    );

Map<String, dynamic> _$PatentsQueryToJson(_PatentsQuery instance) =>
    <String, dynamic>{
      'q': instance.q,
      'location': instance.location,
      'gl': _$CountryCodeEnumMap[instance.countryCode],
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
      'num': instance.num,
      'autocorrect': instance.autocorrect,
      'tbs': _$TbsValueEnumMap[instance.tbs],
      'page': instance.page,
    };

_SearchQuery _$SearchQueryFromJson(Map<String, dynamic> json) => _SearchQuery(
  q: json['q'] as String,
  location: json['location'] as String?,
  countryCode: $enumDecodeNullable(_$CountryCodeEnumMap, json['gl']),
  languageCode: $enumDecodeNullable(_$LanguageCodeEnumMap, json['hl']),
  num: (json['num'] as num?)?.toInt(),
  autocorrect: json['autocorrect'] as bool?,
  tbs: $enumDecodeNullable(_$TbsValueEnumMap, json['tbs']),
  page: (json['page'] as num?)?.toInt(),
);

Map<String, dynamic> _$SearchQueryToJson(_SearchQuery instance) =>
    <String, dynamic>{
      'q': instance.q,
      'location': instance.location,
      'gl': _$CountryCodeEnumMap[instance.countryCode],
      'hl': _$LanguageCodeEnumMap[instance.languageCode],
      'num': instance.num,
      'autocorrect': instance.autocorrect,
      'tbs': _$TbsValueEnumMap[instance.tbs],
      'page': instance.page,
    };

_WebpageQuery _$WebpageQueryFromJson(Map<String, dynamic> json) =>
    _WebpageQuery(
      url: json['url'] as String,
      includeMarkdown: json['includeMarkdown'] as bool?,
      q: json['q'] as String?,
    );

Map<String, dynamic> _$WebpageQueryToJson(_WebpageQuery instance) =>
    <String, dynamic>{
      'url': instance.url,
      'includeMarkdown': instance.includeMarkdown,
      'q': instance.q,
    };
